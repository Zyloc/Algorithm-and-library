// a1, a2, a3, ..., an
// b1, b2, b3, ..., bn

// c1(a1+b1), c2(a1+b2), ....., ck(an+bn)

// 1, 2, 3
// 4, 5, 6

// 5, 6, 7, 6, 7, 8, 7, 8, 9

// ans: 9, 8, 8

// 1, 1, 1, 200

// 2, 3, 4, 200

// 1, 2, 2, 4, 5
// 1, 2, 2, 4 ,5

// 6, 

#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,x;
    int ans[n-1],minimumSofar(INT_MAX);
    memset(ans,0,sizeof ans);
    minimumSoFar = a[n-1]+b[0];
    ans[n-1] = n;
    for(int i(n-2);i>=0;i--){
        int index(upper_bound(B.begin(),B.end(),minimumSoFar-A[i])-B.begin());
        if(index >= n){
            break;
        }
        ans[i+1]-=n-index;
        ans[i]=n-index;
        minimumSoFar = A[i]+b[index];
    }
    for(int i=n-1;i>=0;i--){
        if(ans[i] == 0){
            break;
        for(int j(0);j<ans[i];j++){
            output.push_back(A[i]+B[n-j]);
        }
    }
    sort(output.begin(),output.end(),greater<int>());
}



// n biased coins
// a1, a2, a3, ...., an
// ai - Probability of gettting head in ith coin
// 1 <= k <= n
// find the probability of getting exactly k heads out of n if all coins are tossed once.
// 1 <= n <= 1000

// n = 5
// 0.1 0.2 0.3 0.4 0.5
// k = 3

dp[i][j] = dp[i-1][j-1]*a[i]+dp[i-1][j]*(1-a[i])